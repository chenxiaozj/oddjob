<!-- ===========================================================================

	Build file for Oddjob
	=====================

============================================================================ -->

<project default="jar" basedir="." name="Oddjob">

	<!-- =================================================================== -->
	<!-- Initialization target                                               -->
	<!-- =================================================================== -->
	<target name="init">

		<tstamp/>


		<!-- =================================================================== -->
		<!-- Properties                                                          -->
		<!-- =================================================================== -->

		<property name="Name"     value="Oddjob"/>
		<property name="name"     value="oddjob"/>
		<property name="build.version"  value="0.0.0"/>

		<echo message="--------------------------------------------------------------"/>
		<echo message="            ${Name} ${build.version}                                "/>
		<echo message="--------------------------------------------------------------"/>
		<echo message="Building with ${ant.version}"/>
		<echo message="using build file ${ant.file}"/>
		<echo message="--------------------------------------------------------------"/>

		<property name="debug"          value="on"/>
		<property name="optimize"       value="off"/>
		<property name="deprecation"    value="off"/>
		<property name="nowarn"         value="on"/>
		<!-- <property name="build.compiler" value="classic"/> -->

		<property name="oddjob.package"  value="org/oddjob"/>
		<property name="src.dir"      value="./src"/>
		<property name="java.dir"     value="${src.dir}/java"/>
		<property name="test.dir"     value="./test"/>
		<property name="test.src"     value="${test.dir}/java"/>
		<property name="work.dir"     value="./work"/>
		<property name="lib.dir"      value="./lib"/>
		<property name="bin.dir"      value="./bin"/>
		<property name="tools.dir"    value="./tools"/>
		<property name="tools.src"    value="${tools.dir}/java"/>
		<property name="opt.dir"      value="./opt"/>
		<property name="opt.lib"      value="${opt.dir}/lib"/>
		
		<property name="build.dir"      value="./build"/>
		<property name="build.src"      value="${build.dir}/src"/>
		<property name="build.test"      value="${build.dir}/test"/>
		<property name="build.classes"     value="${build.dir}/classes"/>
		<property name="build.tools"     value="${build.dir}/tools"/>
		<property name="build.javadocs" value="${build.docs}/api"/>
		<property name="build.xjavadocs" value="${build.dir}/xjavadocs"/>

		<property name="test.reports" value="${build.test}/reports"/>
			
		<property name="jar.name"       value="${name}-${build.version}.jar"/>
		<property name="launch.jar.name"       value="run-${name}.jar"/>

		<!-- selector for run-oddjob.jar -->
		
		  <selector id="run.oddjob">
		    <filename name="${oddjob.package}/launch/**/*"/>
		  </selector>

		<filter token="Name"    value="${Name}"/>
		<filter token="name"    value="${name}"/>
		<filter token="version" value="${build.version}"/>
		<filter token="date"    value="${TODAY}"/>
		<filter token="log"     value="true"/>
		<filter token="verbose" value="true"/>
		<filter token="reference" value="../reference"/>
		<filter token="javadoc" value="../api"/>
		<filter token="userguide" value="../userguide"/>
		<filter token="devguide" value="../devguide"/>

		<!-- =================================================================== -->
		<!-- Identify Classpath                                                 -->
		<!-- =================================================================== -->

		<path id="classpath">
			<fileset dir="${lib.dir}">
				<include name="*.jar"/>
				<exclude name="${name}*.jar"/>
			</fileset>
			<fileset dir="${opt.lib}">
				<include name="*.jar"/>
			</fileset>
		</path>

		<path id="test-classpath">
			<path refid="classpath"/>
			<pathelement path="${build.classes}" />
			<pathelement path="${build.tools}" />
			<fileset dir="${test.dir}/lib">
				<include name="*.jar"/>
			</fileset>
		</path>
		
	</target>

	<!-- =================================================================== -->
	<!-- Prepares the build directory                                        -->
	<!-- =================================================================== -->
	<target name="prepare" depends="init">

		<mkdir dir="${build.dir}"/>

	</target>

	<!-- =================================================================== -->
	<!-- Prepares the source code                                            -->
	<!-- =================================================================== -->

	<target name="prepare-src-main" depends="prepare">

		<mkdir dir="${build.src}"/>
		<mkdir dir="${build.classes}"/>
		<copy todir="${build.src}" filtering="on">
			<fileset dir="${java.dir}">
				<exclude name="**/*.gif"/>
				<exclude name="**/*.properties"/>
				<exclude name="**/*.xml"/>
				<exclude name="**/*.xsl"/>
			</fileset>
		</copy>
		<copy todir="${build.src}" filtering="off">
			<fileset dir="${java.dir}">
				<include name="**/*.gif"/>
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
				<include name="**/*.xsl"/>
			</fileset>
		</copy>
	</target>


	<!-- =================================================================== -->
	<!-- Compiles the source directory                                       -->
	<!-- =================================================================== -->
	<target name="compile" depends="prepare-src-main"
          description="Compiles the source code">

		<copy todir="${build.classes}">
			<fileset dir="${build.src}">
				<include name="**/*.gif"/>
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>
		
		<echo message="Compiling with Java ${ant.java.version}, debug ${debug}, optimize ${optimize}, deprecation ${deprecation}"/>

		<javac srcdir="${build.src}"
           destdir="${build.classes}"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}"
           nowarn="${nowarn}">
			<classpath refid="classpath"/>
		</javac>
	</target>

	<!-- =================================================================== -->
	<!-- Creates the jar file                                                -->
	<!-- =================================================================== -->

	<target name="jar" depends="compile-tests" description="Generates the jar packages">

	    <jar destfile="${launch.jar.name}"
	         basedir="${build.classes}"
	    	 manifest="${src.dir}/manifest.template">
	      <selector refid="run.oddjob"/>
	    </jar>

	    <jar destfile="${lib.dir}/${jar.name}"
	         basedir="${build.classes}">
	      <not>
	        <selector refid="run.oddjob"/>
	      </not>
	      <metainf dir="${build.dir}" includes="LICENSE.txt"/>
	    </jar>
		
	</target>


	<!-- =================================================================== -->
	<!-- Compile tools                                                   -->
	<!-- =================================================================== -->

	<target name="compile-tools" depends="compile" description="Compile tools">
		<mkdir dir="${build.tools}"/>

		<copy todir="${build.tools}" filtering="off">
			<fileset dir="${tools.src}">
				<include name="**/*.gif"/>
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
				<include name="**/*.xsl"/>
			</fileset>
		</copy>
		
		<javac srcdir="${tools.src}"
		   destdir="${build.tools}"
		   debug="${debug}"
		   optimize="${optimize}"
		   deprecation="${deprecation}"
		   nowarn="${nowarn}">
			<classpath>
				<path refid="classpath"/>
				<pathelement location="${build.classes}"/>
				<pathelement location="${build.test}"/>
			</classpath>
		</javac>
	</target>
	
	<!-- =================================================================== -->
	<!-- Prepares the source distribution                                    -->
	<!-- =================================================================== -->
	<target name="dist-src" depends="init" if="dist.src.dir"
          description="Prepares the source distribution">

		<property name="to.dir" value="${dist.src.dir}/${name}"/>
		
		<mkdir dir="${to.dir}/bin"/>
		<mkdir dir="${to.dir}/lib"/>
		<mkdir dir="${to.dir}/opt"/>
		<mkdir dir="${to.dir}/src"/>
		<mkdir dir="${to.dir}/test"/>
		<mkdir dir="${to.dir}/tools"/>

		<copy todir="${to.dir}/bin">
			<fileset dir="${bin.dir}"/>
		</copy>
			
		<copy todir="${to.dir}/test">
			<fileset dir="${test.dir}">
				<exclude name="persist/**"/>
				<exclude name="**/lib/arooa-test.jar"/>
				<exclude name="**/lib/junit.jar"/>
				<exclude name="**/lib/xmlunit-*.jar"/>
			</fileset>
		</copy>

		<copy todir="${to.dir}/opt">
			<fileset dir="${opt.dir}"/>
		</copy>
				
		<copy todir="${to.dir}/src" filtering="off">
			<fileset dir="${src.dir}"/>
		</copy>

		<copy todir="${to.dir}">
			<fileset dir=".">
				<include name="oddjob.xml"/>
				<include name="explorer.xml"/>
				<include name="build.xml"/>
				<include name="server.xml"/>
				<include name="server-jobs.xml"/>
				<include name="client.xml"/>
				<include name="LICENSE.txt"/>
				<include name="RELEASE-NOTES.txt"/>
			</fileset>
		</copy>

		<copy todir="${to.dir}/tools">
			<fileset dir="${tools.dir}"/>
		</copy>

	</target>

	<!-- =================================================================== -->
	<!-- Prepares the binary distribution                                    -->
	<!-- =================================================================== -->
	<target name="dist-bin" depends="jar"
			if="dist.bin.dir">

		<mkdir dir="${dist.bin.dir}"/>
		<mkdir dir="${dist.bin.dir}/bin"/>
		<mkdir dir="${dist.bin.dir}/docs"/>
		<mkdir dir="${dist.bin.dir}/docs/api"/>
		<mkdir dir="${dist.bin.dir}/oddballs"/>

		<copy todir="${dist.bin.dir}/bin">
			<fileset dir="${bin.dir}"/>
		</copy>			

		<copy todir="${dist.bin.dir}/lib">
			<fileset dir="${lib.dir}">
				<include name="*.jar"/>
			</fileset>
		</copy>

		<copy todir="${dist.bin.dir}/opt/lib">
			<fileset dir="${opt.lib}">
				<include name="*.license" />
				<include name="*.jar"/>
			</fileset>
		</copy>
		
		<copy file="${opt.dir}/classes/log4j.properties" 
	    	toDir="${dist.bin.dir}/opt/classes"/>

		<copy file="${launch.jar.name}"
	    	tofile="${dist.bin.dir}/${launch.jar.name}"/>
		
		<copy todir="${dist.bin.dir}">
			<fileset dir=".">
				<include name="oddjob.xml"/>
				<include name="designer.xml"/>
				<include name="explorer.xml"/>
				<include name="server.xml"/>
				<include name="server-jobs.xml"/>
				<include name="client.xml"/>
				<include name="LICENSE.txt"/>
				<include name="RELEASE-NOTES.txt"/>
			</fileset>
		</copy>

	</target>

	<!-- =================================================================== -->
	<!-- Clean targets                                                       -->
	<!-- =================================================================== -->
	<target name="clean" depends="init" description="Cleans the build directories">
		<delete file="${launch.jar.name}"/>
		<delete>
			<fileset dir="${lib.dir}">
				<include name="${name}*.jar"/>
				<include name="arooa*.jar"/>
				<include name="log4j*.jar"/>
				<include name="commons-beanutils*.jar"/>
				<include name="commons-logging*.jar"/>
			</fileset>
		</delete>
		<delete>
			<fileset dir="${test.dir}/lib">
				<include name="arooa-tests.jar"/>
				<include name="junit.jar"/>
				<include name="xmlunit*.jar"/>
			</fileset>
		</delete>
		<delete dir="${build.dir}"/>
		<delete file="${test.dir}/classloader/AJob.class"/>
		<delete dir="${test.dir}/oddballs/apple/classes"/>
		<delete dir="${test.dir}/oddballs/orange/classes"/>
		<delete dir="${work.dir}"/>
	</target>


	<!-- =================================================================== -->
	<!-- Test targets                                                       -->
	<!-- =================================================================== -->
	
	<target name="compile-tests" depends="compile-tools" description="Compile jUnit tests">
		<mkdir dir="${build.test}"/>

		<copy todir="${build.test}" filtering="off">
			<fileset dir="${test.src}">
				<include name="**/*.properties"/>
				<include name="**/*.sql"/>
				<include name="**/*.txt"/>
				<include name="**/*.xml"/>
				<include name="**/*.xsl"/>
			</fileset>
		</copy>
		
		<!-- Compile tests -->
		<javac srcdir="${test.src}"
            destdir="${build.test}"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="${deprecation}">
			<classpath>
				<path refid="test-classpath"/>
			</classpath>
		</javac>

	</target>

	<target name="all-tests" depends="compile-tests, jar" description="Perform jUnit tests">
		<mkdir dir="${work.dir}"/>
		<mkdir dir="${test.reports}"/>
		
		<junit printsummary="yes" haltonfailure="no" 
				failureproperty="junit.failure" fork="yes">
			<classpath>
				<pathelement location="${build.test}" />
			</classpath>
			<classpath>
				<pathelement location="${java.home}/../lib/tools.jar"/>
			</classpath>
			<classpath refid="test-classpath"/>
			<batchtest fork="yes" todir="${test.reports}">
				<fileset dir="${build.test}">
					<include name="**/test/*TestCase.class"/>
					<include name="**/*Test.class" />
					<exclude name="**/AllTest.class" />
					<exclude name="**/*$$*Test.class" />
				</fileset>
			</batchtest>
			<formatter type="xml" />
			<sysproperty key="basedir" value="${basedir}"/>
			<sysproperty key="oddjob.home" value="${oddjob.home}"/>
			<sysproperty key="ant.file" value="${ant.file}"/>
		</junit>
		
		<junitreport todir="${test.reports}">
			<fileset dir="${test.reports}">
		    	<include name="TEST-*.xml" />
			</fileset>
		    <report todir="${test.reports}" />
		</junitreport>
		
		<fail if="junit.failure" message="Unit test(s) failed. See reports in ${test.reports}."/>	
	</target>

	<target name="single-test" depends="jar" description="Single JUnit test">
		<mkdir dir="${work.dir}"/>
			
		<junit printsummary="yes" haltonfailure="yes" fork="yes">
			<classpath>
				<pathelement location="${build.test}" />
			</classpath>
			<classpath refid="test-classpath"/>
			<formatter type="plain" usefile="no" />
			<test name="${junit.test}"/>
			<sysproperty key="basedir" value="${basedir}"/>
			<sysproperty key="oddjob.home" value="${oddjob.home}"/>
			<sysproperty key="ant.file" value="${ant.file}"/>
		</junit>
	</target>
	

</project>

<!-- End of file -->
